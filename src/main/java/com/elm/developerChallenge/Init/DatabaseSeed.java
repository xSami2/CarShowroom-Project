package com.elm.developerChallenge.Init;

import com.elm.developerChallenge.Entity.CarEntity;
import com.elm.developerChallenge.Entity.ShowroomEntity;
import com.elm.developerChallenge.Repository.CarRepository;
import com.elm.developerChallenge.Repository.ShowroomRepository;
import com.github.javafaker.Faker;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@RequiredArgsConstructor
@Component
public class DatabaseSeed {

    private final ShowroomRepository showroomRepository;
    private final CarRepository carRepository;

    private final Faker faker = new Faker();

    @PostConstruct
    public void init() {
        System.out.println("$$$$$$");
        insertShowrooms();  // Insert 20 showrooms
      //  insertCars();       // Insert cars
    }

    private void insertShowrooms() {
        for (int i = 1; i <= 20; i++) {
            String name = "Showroom " + i;
            String crn = "CRN" + i;
            String managerName = faker.name().fullName();
            String contactNumber = "12345678" + i;
            String address = faker.address().fullAddress();

            // Create a new ShowroomEntity with generated data
            ShowroomEntity showroom = new ShowroomEntity(
                    null,                          // ID is auto-generated by the DB
                    name,                          // Name
                    crn,                           // Commercial Registration Number
                    managerName,                   // Manager Name
                    contactNumber,                 // Contact Number
                    address,                       // Address
                    new ArrayList<>(),             // Empty list for car entities (can be populated later)
                    null,                          // created_at will be auto-generated
                    null,                          // updated_at will be auto-generated
                    true                            // active flag
            );

            showroomRepository.save(showroom);  // Save the showroom entity
        }
    }

    private void insertCars() {
        List<ShowroomEntity> showrooms = showroomRepository.findAll(); // Fetch all showrooms

        for (int i = 1; i <= 20; i++) {
            ShowroomEntity showroom = showrooms.get(i % showrooms.size()); // Cycle through showrooms
            System.out.println(showroom.getName());

            // Create a random CarEntity for each showroom
            CarEntity car = new CarEntity(
                    String.valueOf(UUID.randomUUID()),
                    "VIN" + i,                // Dynamically set VIN
                    "Maker " + i,             // Dynamically set maker
                    "Model " + i,             // Dynamically set model
                    String.valueOf(2020 + (i % 5)), // Dynamically set model year (between 2020-2024)
                    5000.7,                   // Dynamically set price (incrementing)
                    showroom,                 // Associate with a showroom
                    Instant.now(),
                    Instant.now(),
                    true                      // Active flag
            );

            carRepository.save(car); // Save each car
        }
    }
}
